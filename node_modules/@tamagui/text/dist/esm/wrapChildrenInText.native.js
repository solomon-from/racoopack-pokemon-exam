import { jsx as _jsx } from "react/jsx-runtime";
import React from "react";
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function wrapChildrenInText(TextComponent, propsIn, extraProps) {
  var children = propsIn.children, textProps = propsIn.textProps, size = propsIn.size, noTextWrap = propsIn.noTextWrap, color = propsIn.color, fontFamily = propsIn.fontFamily, fontSize = propsIn.fontSize, fontWeight = propsIn.fontWeight, letterSpacing = propsIn.letterSpacing, textAlign = propsIn.textAlign, fontStyle = propsIn.fontStyle, maxFontSizeMultiplier = propsIn.maxFontSizeMultiplier;
  if (noTextWrap || !children)
    return [
      children
    ];
  var props = _object_spread({}, extraProps);
  return color && (props.color = color), fontFamily && (props.fontFamily = fontFamily), fontSize && (props.fontSize = fontSize), fontWeight && (props.fontWeight = fontWeight), letterSpacing && (props.letterSpacing = letterSpacing), textAlign && (props.textAlign = textAlign), size && (props.size = size), fontStyle && (props.fontStyle = fontStyle), maxFontSizeMultiplier && (props.maxFontSizeMultiplier = maxFontSizeMultiplier), React.Children.toArray(children).map(function(child, index) {
    return typeof child == "string" ? (
      // so "data-disable-theme" is a hack to fix themeInverse, don't ask me why
      /* @__PURE__ */ _jsx(TextComponent, _object_spread_props(_object_spread({}, props, textProps), {
        children: child
      }), index)
    ) : child;
  });
}
export {
  wrapChildrenInText
};
//# sourceMappingURL=wrapChildrenInText.js.map
